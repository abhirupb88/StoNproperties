rm(mu, sig, k)
load("D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis/Brainweb/Brainweb.expt.Rdata")
noise = c(0,1,3,5,7,9); rf = c(0,20,40)
tissue = c("CSF", "Gray Matter", "White Matter")
for (c in 1:3) {
for (ii in 1:length(noise)) {
for (jj in 1:length(rf)) {
img = readNIfTI( sprintf("dataset/t1_icbm_normal_1mm_pn%d_rf%d.nii", noise[ii], rf[jj]) )
img.gt = readNIfTI( "dataset/phantom_1.0mm_normal_crisp.nii" )
img.dat = img@.Data; img.cls = img.gt@.Data
mle = Brainweb.expt[[(ii-1)*length(rf)+jj]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = XS[XS>0]
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("Brainweb-vol-%s-noise-%d-rf-%d.jpg", tissue[c], noise[ii], rf[jj]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, ylim = c(0,ht), main = sprintf("Brainweb volume noise %d%% INU %d%%: %s", noise[ii], rf[jj], tissue[c]),
xlab = "Intensity", cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mle[1], mle[2], mle[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mle,XS,h,xfit,yfit,ht)
} } }
Norm_Test
StN_Test
directf = "D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis"
library(oro.nifti); library(freesurfer)
library(StoNproperties)
library(moments)
load("D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis/IBSR/IBSR.expt.Rdata")
setwd( file.path(directf, "IBSR") )
tissue = c("CSF", "Gray Matter", "White Matter")
img.set = matrix( c(3,5,6,7,9,10,16,17,18), nrow=3, byrow=TRUE)
c=1
dim(img.set)[2]
i=1
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = XS[XS>0]
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
for (c in 1:3) {
for (i in 1:dim(img.set)[2]) {
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = XS[XS>0]
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
} }
for (c in 1:3) {
for (i in 1:dim(img.set)[2]) {
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt.log[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = log(XS[XS>0])
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-log-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, xlim = c(min(XS),5.1), ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "log-Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
} }
load("D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis/IBSR/IBSR.expt.log.Rdata")
for (c in 1:3) {
for (i in 1:dim(img.set)[2]) {
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt.log[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = log(XS[XS>0])
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-log-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, xlim = c(min(XS),5.1), ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "log-Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
} }
img.set = matrix( c(4,5,6,9,10,11,16,17,18), nrow=3, byrow=TRUE)
for (c in 1:3) {
for (i in 1:dim(img.set)[2]) {
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = XS[XS>0]
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
} }
for (c in 1:3) {
for (i in 1:dim(img.set)[2]) {
ii = img.set[c,i]
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt.log[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = log(XS[XS>0])
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-log-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, xlim = c(min(XS),5.1), ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "log-Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
} }
directf = "D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis"
library(oro.nifti); library(freesurfer)
library(StoNproperties)
library(moments)
setwd( file.path(directf, "IBSR") )
load("D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis/IBSR/IBSR.expt.log.Rdata")
tissue = c("CSF", "Gray Matter", "White Matter")
img.set = matrix( c(4,5,6,9,10,11,16,17,18), nrow=3, byrow=TRUE)
c=2
ii=11
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt.log[[ii]][[c]]$mle.StoN
mom
XS = img.dat[img.cls==c]; XS = log(XS[XS>0])
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-log-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "log-Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
img = readNIfTI( sprintf("dataset/IBSR_%02d_ana_ss.nii", ii) )
img.gt = readNIfTI( sprintf("dataset/IBSR_%02d_segTRI_fill_ana.nii", ii) )
img.dat = img@.Data; img.cls = img.gt@.Data
mom = IBSR.expt.log[[ii]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = log(XS[XS>0])
h = hist(XS)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dnorm(xfit, mean = mean(XS), sd = sd(XS))
yfit = yfit*diff(h$mids[1:2])*length(XS)
ht = max(max(yfit), max(h$counts))
rm(h)
jpeg(sprintf("IBSR-log-vol-%d-%s.jpg", ii, tissue[c]), width = 900, height = 600)
par(mar = c(5,4.75,4,2) + 0.1)
h = hist(XS, xlim = c(min(XS),6.8), ylim = c(0,ht), main = sprintf("IBSR Subject no. %d: %s", ii, tissue[c]), xlab = "log-Intensity",
cex.lab=2.5, cex.axis=2.0, cex.main=2.5, cex.sub=2.0)
lines(xfit, yfit, col="blue", lwd=2)
rm(xfit,yfit)
xfit = seq(min(XS),max(XS),length=5000)
yfit = dStoN(xfit, mom[1], mom[2], mom[3])
yfit = yfit*diff(h$mids[1:2])*length(XS)
lines(xfit, yfit, col="red", lwd=2)
legend("topright", inset=.02, legend=c("Normal", "StN"), col=c("blue", "red"), lty = 1, lwd = 2, cex=2.0)
dev.off()
rm(img,img.gt,img.dat,img.cls,mom,XS,h,xfit,yfit,ht)
directf = "D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/analysis/"
library(ggplot2); library(latex2exp); library(reprex); library(StoNproperties)
setwd(directf)
MLestimate.k = function(data, mu, sig) {
dummy = unique(sort(abs(data-mu)/sig))
dummy = unique(round(dummy,2))
k.est = 0; diff = 1
while(diff > 0.000001){
dumLik = sapply(dummy, function(x) sum(log(dStoN(data, mu, sig, x))))
idx = max(which(dumLik==max(dumLik)))
if (idx == 1 | idx == length(dummy)) {
k.est = dummy[idx]; diff = 0
} else {
k.tmp = dummy[idx]; k.low = dummy[idx-1]; k.top = dummy[idx+1]
dummy = seq(k.low, k.top, length.out = 100)
diff  = abs(sum(log(dStoN(data, mu, sig, k.tmp))) - sum(log(dStoN(data, mu, sig, k.est))))
k.est = k.tmp; rm(k.tmp, k.low, k.top)
}
rm(dumLik)
}
rm(dummy, diff)
return(k.est)
}
?estimate.mle
MLestimate.k = function(data, mu, sig) {
dummy = unique(sort(abs(data-mu)/sig))
dummy = unique(round(dummy,2))
k.est = 0; diff = 1
while(diff > 0.000001){
dumLik = sapply(dummy, function(x) sum(log(dStoN(data, mu, sig, x))))
idx = max(which(dumLik==max(dumLik)))
if (idx == 1 | idx == length(dummy)) {
k.est = dummy[idx]; diff = 0
} else {
k.tmp = dummy[idx]; k.low = dummy[idx-1]; k.top = dummy[idx+1]
dummy = seq(k.low, k.top, length.out = 100)
diff  = abs(sum(log(dStoN(data, mu, sig, k.tmp))) - sum(log(dStoN(data, mu, sig, k.est))))
k.est = k.tmp; rm(k.tmp, k.low, k.top)
}
rm(dumLik)
}
rm(dummy, diff)
return(k.est)
}
estimate.mom = function(XS) {
mu.mom = mean(XS); s2 = var(XS)
m4 = mean((XS - mu.mom)^4)
solve.k = function(k) s2^2*(3+(dnorm(k)*(k^3+k^5/5))/(1-pnorm(k)+k*dnorm(k)))-m4*(1+(dnorm(k)*k^3)/(3*(1-pnorm(k)+k*dnorm(k))))^2
k.mom = try(uniroot(solve.k, c(0, 10))$root,silent = TRUE)
if(is(k.mom,'numeric')) {
sig.mom = sqrt(s2/(1+(dnorm(k.mom)*k.mom^3)/(3*(1-pnorm(k.mom)+k.mom*dnorm(k.mom)))))
} else {
sig.mom = NA; k.mom = NA
}
rm(solve.k,s2,m4)
return( c(mu.mom,sig.mom,k.mom) )
}
estimate.mle = function(XS) {
mom = estimate.mom(XS); mu0 = mom[1]
if (is.na(mom[2])) sig0 = sqrt(var(XS)) else sig0 = mom[2]
if (is.na(mom[3])) k0 = 0 else k0 = mom[3]
max_iter = 500; diff = 1.0; iter = 1
while(diff > 0.09 & iter < max_iter) {
k1 = MLestimate.k(XS, mu0, sig0)
sig1 = optim(par=sig0, function(sig) sum(log(dStoN(XS,mu0,sig,k1))), method = "Brent",
lower = 0.0001, upper = 50, control=list(trace=2,fnscale=-1))$par
mu1  = mean(XS[abs((XS-mu0)/sig1)<=k1])
if (sum(log(dStoN(XS,mu1,sig1,k1)))-sum(log(dStoN(XS,mu0,sig1,k1))) > -0.1 & !is.na(mu1)) mu0 = mu1
diff = sum(log(dStoN(XS,mu0,sig1,k1)))-sum(log(dStoN(XS,mu0,sig0,k0)))
sig0 = sig1; k0 = k1; iter = iter+1
rm(mu1,sig1,k1)
}
rm(mom,max_iter,diff,iter)
return( c(mu0, sig0, k0) )
}
mu  = rep(10,3)
sig = rep(2,3)
k = 1:3
XS = rStoN(50000, mu[ii], sig[ii], k[ii])
ii=1
XS = rStoN(50000, mu[ii], sig[ii], k[ii])
estimate.mle(XS)
XS = rnorm(50000, mu[ii], sig[ii])
estimate.mle(XS)
mu = c(1.0); sig = c(0.1, 1, 5); k = c(0.5, 1, 3)
simul.expt = vector("list", length(mu)*length(sig)*length(k)); cnt = 1
for (ii in 1:length(mu)) {
for (jj in 1:length(sig)) {
for (kk in 1:length(k)) {
simul.expt[[cnt]] = list("mu" = mu[ii], "sig" = sig[jj], "k" = k[kk])
cnt = cnt + 1
} } }
rm(cnt, mu, sig, k, ii, jj, kk)
simul.expt
size.sample = c(20, 50, 100, 1000, 5000, 10000)
size.sim = 5000
size.sample = c(20, 50, 100, 1000, 5000, 10000)
size.sim = 50#00
simul.expt$param.mle = vector("list", length(size.sample))
rm(simul.expt)
simul.expt$param.mle = vector("list", length(size.sample))
param.mle = vector("list", length(size.sample))
length(size.sample)
si=1
param.mle
size.sample = c(20, 50, 100, 1000, 5000, 10000)
size.sim = 50#00
param.mle = vector("list", length(size.sample))
si = 1
names(param.mle)[si] = size.sample[si]
param.mle
?simulParam.mle
?simulParam.mle.N
simulParam.mle.N = function(simsz, smpsz, mu, sig) {
simpar = matrix(NA,simsz,3)
colnames(simpar) = c("mu","sig","k")
for (ss in 1:simsz) {
XS = rnorm(smpsz, mu, sig)
simpar[ss,] = estimate.mle(XS)
print(sprintf("(%.1f,%.1f,%.1f)#### Simulation - %4d  ####(%.4f,%.4f,%.4f)",
mu, sig, k, ss, simpar[ss,1], simpar[ss,2], simpar[ss,3]))
rm(XS)
}
return(simpar)
}
?simulParam.mle.N
??simulParam.mle.N
simulParam.mle.N = function(simsz, smpsz, mu, sig) {
simpar = matrix(NA,simsz,3)
colnames(simpar) = c("mu","sig","k")
for (ss in 1:simsz) {
XS = rnorm(smpsz, mu, sig)
simpar[ss,] = estimate.mle(XS)
print(sprintf("(%.1f,%.1f,%.1f)#### Simulation - %4d  ####(%.4f,%.4f,%.4f)",
mu, sig, k, ss, simpar[ss,1], simpar[ss,2], simpar[ss,3]))
rm(XS)
}
return(simpar)
}
param.mle[[si]] = simulParam.mle.N(size.sim[si], size.sample[si], 10, 2)
param.mle[[si]] = simulParam.mle.N(size.sim[si], size.sample[si], 10, 2)
simulParam.mle.N = function(simsz, smpsz, mu, sig) {
simpar = matrix(NA,simsz,3)
colnames(simpar) = c("mu","sig","k")
for (ss in 1:simsz) {
XS = rnorm(smpsz, mu, sig)
simpar[ss,] = estimate.mle(XS)
print(sprintf("(%.1f,%.1f)#### Simulation - %4d  ####(%.4f,%.4f,%.4f)",
mu, sig, ss, simpar[ss,1], simpar[ss,2], simpar[ss,3]))
rm(XS)
}
return(simpar)
}
size.sim
size.sim[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"mu"])
mean(param.mle[[si]][,"sigma"])
mean(param.mle[[si]][,"sig"])
mean(param.mle[[si]][,"k"])
size.sim = 5000
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"mu"])
mean(param.mle[[si]][,"sig"])
mean(param.mle[[si]][,"k"])
sd(param.mle[[si]][,"k"])
hist(rnorm(20, 10, 2))
hist(rnorm(20, 10, 2))
XS = rnorm(smpsz, mu, sig)
XS=rnorm(20, 10, 2)
hist(XS)
estimate.mle(XS)
c(mean(XS), sd(XS))
sum(log(dnorm(XS,mean(XS),sd(XS))))
lie
lie = estimate.mle(XS)
sum(log(dStoN(XS,lie[1],lie[2],lie[3])))
si=2
size.sim = 50#00
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"k"])
mean(param.mle[[si]][,"sig"])
mean(param.mle[[si]][,"mu"])
si=3
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"mu"])
mean(param.mle[[si]][,"sig"])
mean(param.mle[[si]][,"k"])
si=4
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"k"])
si=5
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"k"])
size.sim = 10
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
si=6
names(param.mle)[si] = size.sample[si]
param.mle[[si]] = simulParam.mle.N(size.sim, size.sample[si], 10, 2)
mean(param.mle[[si]][,"k"])
directf = "D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis"
library(oro.nifti); library(freesurfer)
library(StoNproperties)
setwd( file.path(directf, "Brainweb") )
load("D:/Oxford_research_projects/Research Collaborations/Sujay-da/StoN-properties/brain_MR_analysis/Brainweb/Brainweb.expt.Rdata")
tissue = c("CSF", "Gray Matter", "White Matter")
c=1
ii=1
jj=1
img = readNIfTI( sprintf("dataset/t1_icbm_normal_1mm_pn%d_rf%d.nii", noise[ii], rf[jj]) )
img.gt = readNIfTI( "dataset/phantom_1.0mm_normal_crisp.nii" )
img.dat = img@.Data; img.cls = img.gt@.Data
mle = Brainweb.expt[[(ii-1)*length(rf)+jj]][[c]]$mle.StoN
noise = c(0,1,3,5,7,9); rf = c(0,20,40)
img = readNIfTI( sprintf("dataset/t1_icbm_normal_1mm_pn%d_rf%d.nii", noise[ii], rf[jj]) )
img.gt = readNIfTI( "dataset/phantom_1.0mm_normal_crisp.nii" )
img.dat = img@.Data; img.cls = img.gt@.Data
mle = Brainweb.expt[[(ii-1)*length(rf)+jj]][[c]]$mle.StoN
XS = img.dat[img.cls==c]; XS = XS[XS>0]
hist(XS)
mix(XS)
min(XS)
min(XS)%%5
floor(min(XS)/5)*5
min(XS)
max(XS)
?seq
seq(floor(min(XS)/5)*5, ceil(min(XS)/5)*5, 5)
?ceiling
seq(floor(min(XS)/5)*5, ceiling(min(XS)/5)*5, 5)
seq(floor(min(XS)/5)*5, ceiling(max(XS)/5)*5, 5)
mean(param.mle[[1]][,"k"])
